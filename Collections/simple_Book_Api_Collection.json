{
	"info": {
		"_postman_id": "02b6a5d2-447e-4767-aaba-d756826efad5",
		"name": "Simple Book API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37129844"
	},
	"item": [
		{
			"name": "Books",
			"item": [
				{
					"name": "Register Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Access Token is present\", ()=>{\r",
									"    const rs = pm.response.json()\r",
									"    pm.expect(rs).to.have.property(\"accessToken\")\r",
									"})\r",
									"\r",
									"const rs = pm.response.json();\r",
									"pm.environment.set(\"accessToken\", rs.accessToken);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"clientName\": \"{{$randomFullName}}\",\r\n    \"clientEmail\": \"{{$randomEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api-clients",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "API Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const rs = pm.response.json();\r",
									"\r",
									"pm.test(\"Status should be OK\", function(){\r",
									"    pm.expect(rs.status).to.eql(\"OK\")\r",
									"});\r",
									"\r",
									"const apiStatusSchema = \r",
									"{\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"status\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Schema is correct\", ()=>{\r",
									"    pm.response.to.have.jsonSchema(apiStatusSchema)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/status",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "List All Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const rs = pm.response.json();\r",
									"\r",
									"const fictionBooks = rs.filter((book) => book.available === true);\r",
									"\r",
									"const book1 = fictionBooks[0];\r",
									"\r",
									"pm.test(\"Book is available.\", () => {\r",
									"    pm.expect(book1).to.be.an('object');\r",
									"    pm.expect(book1.available).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Book type is fiction.\", () => {\r",
									"    pm.expect(book1.type).to.eql(\"fiction\");\r",
									"});\r",
									"\r",
									"const allBooksSchema = {\r",
									"\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": { \"type\": \"number\" },\r",
									"      \"name\": { \"type\": \"string\" },\r",
									"      \"type\": { \"type\": \"string\" },\r",
									"      \"available\": { \"type\": \"boolean\" }\r",
									"    },\r",
									"    \"required\": [\"id\", \"name\", \"type\", \"available\"]\r",
									"  }\r",
									"\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is correct.\", ()=>{\r",
									"    pm.response.to.have.jsonSchema(allBooksSchema);\r",
									"})\r",
									"\r",
									"const randomIndex = Math.floor(Math.random() * 5);\r",
									"\r",
									"if (rs.length > 0 && rs[randomIndex]) {\r",
									"    pm.collectionVariables.set(\"bookId\", rs[randomIndex].id);\r",
									"} else {\r",
									"    console.warn(\"No book found at the generated index.\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/books?limit=10&type=fiction",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "type",
									"value": "fiction"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Fictions Only (Query Params)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/books?type=fiction",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "fiction"
								},
								{
									"key": "limit",
									"value": "2",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Single Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", ()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const rs = pm.response.json();\r",
									"\r",
									"pm.test(\"Book is in stock.\", () => {\r",
									"    pm.expect(rs['current-stock']).to.be.above(0);\r",
									"});\r",
									"\r",
									"const singleBookSchema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"available\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"current-stock\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"price\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"author\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"available\",\r",
									"    \"name\",\r",
									"    \"current-stock\",\r",
									"    \"price\",\r",
									"    \"author\",\r",
									"    \"type\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is correct\", ()=>{\r",
									"    pm.response.to.have.jsonSchema(singleBookSchema);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const bookId = pm.collectionVariables.get(\"bookId\");\r",
									"\r",
									"if (bookId === null) {\r",
									"    pm.collectionVariables.set(\"bookId\", Math.floor(Math.random() * 5)+1);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/books/:idOfBook",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"books",
								":idOfBook"
							],
							"variable": [
								{
									"key": "idOfBook",
									"value": "{{bookId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Place Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"let rs = pm.response.json()\r",
									"pm.collectionVariables.set(\"newCreatedOrderId\", rs.orderId);\r",
									"\r",
									"\r",
									"pm.test(\"Order is created\",()=>{\r",
									"    pm.expect(rs.created).to.be.true;\r",
									"});\r",
									"\r",
									"const placeOrderSchema = {\r",
									"\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"created\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"orderId\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"created\",\r",
									"    \"orderId\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Schema is correct\", ()=>{\r",
									"    pm.response.to.have.jsonSchema(placeOrderSchema);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const bookId = pm.collectionVariables.get(\"bookId\");\r",
									"\r",
									"if (bookId === null) {\r",
									"    pm.collectionVariables.set(\"bookId\", Math.floor(Math.random() * 5)+1);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"bookId\": {{bookId}},\r\n  \"customerName\": \"{{$randomFullName}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseURL}}/orders",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/orders",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get An Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const getOrderSchema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"bookId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"customerName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"quantity\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"bookId\",\r",
									"    \"customerName\",\r",
									"    \"quantity\",\r",
									"    \"timestamp\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is correct\", ()=>{\r",
									"    pm.response.to.have.jsonSchema(getOrderSchema);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/orders/:orderId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{newCreatedOrderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", ()=>{\r",
									"    pm.response.to.have.status(204);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const token = pm.environment.get(\"accessToken\")\r",
									"\r",
									"if(token){\r",
									"    pm.request.headers.add({\r",
									"        key:\"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    })\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customerName\" : \"Ayush Chand\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/orders/:orderId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{newCreatedOrderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", ()=>{\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const token = pm.environment.get(\"accessToken\")\r",
									"\r",
									"if(token){\r",
									"    pm.request.headers.add({\r",
									"        key:\"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    })\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"orderId\" : {{newCreatedOrderId}}\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/orders/:orderId",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{newCreatedOrderId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"const token = pm.environment.get(\"accessToken\")\r",
					"\r",
					"if(token){\r",
					"    pm.request.headers.add({\r",
					"        key:\"Authorization\",\r",
					"        value: `Bearer ${token}`\r",
					"    })\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://simple-books-api.click",
			"type": "default"
		},
		{
			"key": "newCreatedOrderId",
			"value": ""
		},
		{
			"key": "bookId",
			"value": ""
		}
	]
}